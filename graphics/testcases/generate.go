// seehuhn.de/go/pdf - a library for reading and writing PDF files
// Copyright (C) 2024  Jochen Voss <voss@seehuhn.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//go:build ignore

package main

import (
	"fmt"
	"log"
	"os"

	"seehuhn.de/go/pdf"
	"seehuhn.de/go/pdf/graphics/testcases"
	"seehuhn.de/go/pdf/internal/ghostscript"
)

func main() {
	err := run()
	if err != nil {
		log.Fatal(err)
	}
}

func run() error {
	out, err := os.Create("gs.go")
	if err != nil {
		return err
	}
	defer out.Close()

	fmt.Fprintln(out, "// Code generated by ./generate.go .  DO NOT EDIT.")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "package testcases")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "// AllGhostscript contains the text positions determined using ghostscript.")
	fmt.Fprintln(out, "// This corresponds to the test cases in All.")
	fmt.Fprintln(out, "var AllGhostscript = []Answer{")
	for _, setup := range testcases.All {
		x, y, err := ghostscript.FindTextPos(pdf.V1_7, testcases.Paper, setup)
		if err != nil {
			return err
		}
		fmt.Fprintf(out, "\t{%.6f, %.6f},\n", x, y)
	}
	fmt.Fprintln(out, "}")

	return nil
}
