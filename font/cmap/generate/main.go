// seehuhn.de/go/pdf - a library for reading and writing PDF files
// Copyright (C) 2025  Jochen Voss <voss@seehuhn.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package main

import (
	"fmt"
	"go/format"
	"os"
	"sort"
	"strings"
)

func main() {
	if err := generateDataFile(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func generateDataFile() error {
	predefinedDir := "predefined"
	entries, err := os.ReadDir(predefinedDir)
	if err != nil {
		return fmt.Errorf("reading predefined directory: %w", err)
	}

	var names []string
	for _, entry := range entries {
		name := entry.Name()
		if strings.HasSuffix(name, ".gz") {
			// Remove .gz extension
			name = strings.TrimSuffix(name, ".gz")
			names = append(names, name)
		}
	}

	sort.Strings(names)

	code := generateCode(names)

	formatted, err := format.Source([]byte(code))
	if err != nil {
		return fmt.Errorf("formatting generated code: %w", err)
	}

	outputPath := "data.go"
	if err := os.WriteFile(outputPath, formatted, 0644); err != nil {
		return fmt.Errorf("writing data.go: %w", err)
	}

	return nil
}

func generateCode(names []string) string {
	var sb strings.Builder
	sb.WriteString("// Code generated by go run generate/main.go; DO NOT EDIT.\n\n")
	sb.WriteString("package cmap\n\n")
	sb.WriteString("// allPredefined contains the names of all predefined CMaps available in the embedded directory.\n")
	sb.WriteString("var allPredefined = []string{\n")

	for _, name := range names {
		fmt.Fprintf(&sb, "\t%q,\n", name)
	}

	sb.WriteString("}\n")
	return sb.String()
}
