// seehuhn.de/go/pdf - a library for reading and writing PDF files
// Copyright (C) 2023  Jochen Voss <voss@seehuhn.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package cmap

import (
	"compress/gzip"
	"embed"
	"io"
	"sync"
)

// TODO(voss): restrict the list of predefined CMaps to the ones which are
// listed in the PDF specification.

//go:embed predefined/*.gz
var predefined embed.FS

//go:generate go run generate/main.go

var (
	predefinedMu    sync.Mutex
	predefinedCache = make(map[string]*File)
)

// Predefined returns a predefined CMap by name.
// It caches the result to avoid loading the same CMap multiple times.
// The returned CMap must not be modified.
// Returns an error if the named CMap is not found in the predefined directory.
func Predefined(name string) (*File, error) {
	predefinedMu.Lock()
	defer predefinedMu.Unlock()
	return loadPredefinedLocked(name)
}

// loadPredefinedLocked must be called with predefinedMu held
func loadPredefinedLocked(name string) (*File, error) {
	if cached, ok := predefinedCache[name]; ok {
		return cached, nil
	}

	c, err := loadPredefined(name)
	if err != nil {
		return nil, err
	}

	predefinedCache[name] = c
	return c, nil
}

func loadPredefined(name string) (*File, error) {
	fd, err := openPredefined(name)
	if err != nil {
		return nil, err
	}

	c, pName, err := readCMap(fd)
	if err != nil {
		return nil, err
	}

	err = fd.Close()
	if err != nil {
		return nil, err
	}

	if pName != "" {
		parent, err := loadPredefinedLocked(string(pName))
		if err != nil {
			return nil, err
		}
		c.Parent = parent
	}
	return c, nil
}

func openPredefined(name string) (io.ReadCloser, error) {
	fd, err := predefined.Open("predefined/" + name + ".gz")
	if err != nil {
		return nil, err
	}
	return gzip.NewReader(fd)
}

// IsPredefined returns true if the CMap is one of the CMaps predefined in PDF.
// It checks whether this exact object has been generated by the Predefined method
// by looking up by name and comparing pointers.
func (f *File) IsPredefined() bool {
	predefinedMu.Lock()
	defer predefinedMu.Unlock()

	cached, ok := predefinedCache[f.Name]
	return ok && cached == f
}
